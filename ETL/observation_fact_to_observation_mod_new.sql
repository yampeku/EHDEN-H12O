--by Diego Bosca 20210120
INSERT INTO observation
(
    observation_id, -- Auto-increment 
    person_id,
    observation_concept_id,
    observation_date,
    observation_datetime,
    observation_type_concept_id, -- 38000276 [Problem list from EHR] 
    value_as_number,
    value_as_string,
    value_as_concept_id,
    qualifier_concept_id,
    unit_concept_id,
    provider_id,
    visit_occurrence_id,
    visit_detail_id,
    observation_source_value,
    observation_source_concept_id,
    unit_source_value,
    qualifier_source_value
)
SELECT DISTINCT -- DISTINCT to avoid duplicate records with same values with only different instance_num, tex_search_index, etc. 

-- [AUTOGENERATED]
    nextval('observation_id_seq') AS observation_id,

    patient_num AS person_id,

 -- [MAPPING   LOGIC] For LOINC Codes: direct mapping to retrieve concept-id   For codes from the hospital (ES_12OCTUBRE_LAB) check on mapping through concept_path ((concept_dimension table) and check if there is a LOINC code in there. Codes where there is no corresponding LOINC code in the concept_path should be manually reviewed  
 -- [MAPPING COMMENT] TODO: Drop rows that map to concept_id's that should have values. For example, SNOMED 80274001 (gfr) with no value: the gfr data should come with a value.  
    target_concept_id AS observation_concept_id,

	start_date::date AS observation_date,

 -- [MAPPING COMMENT] no mapping logic defined. Put NULL
    start_date AS observation_datetime,

 -- [Fixed to] 38000276 [Problem list from EHR] 
    38000276 AS observation_type_concept_id,

    nval_num AS value_as_number,

 -- [MAPPING   LOGIC] Observations with tval_char = “G” are Greater than, “L” means Lower than.    For concepts that have a ‘G' or 'L’ in any of the rows, use the value_as_string to record the value (from nval_num) and operator, as for example ">90". 
	CASE
		WHEN tval_char='G' THEN CONCAT('>',nval_num::text)
		WHEN tval_char='L' THEN CONCAT('<',nval_num::text)
		--WHEN tval_char='E'
		ELSE nval_num::text
	END AS value_as_string,

 -- [MAPPING COMMENT] no mapping logic defined. Put NULL
    NULL::integer AS value_as_concept_id,

 -- [MAPPING COMMENT] no mapping logic defined. Put NULL
    NULL::integer AS qualifier_concept_id,

    coalesce((select units_cd_lookup.concept_id from units_cd_lookup where units_cd_lookup.units_cd=units_cd limit 1),0) AS unit_concept_id,

	coalesce((select provider_id from provider where i2b2_observation.provider_id=provider.provider_source_value limit 1),0) AS provider_id,

    encounter_num AS visit_occurrence_id,

 -- [MAPPING COMMENT] no mapping logic defined. Put NULL
    NULL::integer AS visit_detail_id,

    concept_cd AS observation_source_value,

    source_concept_id AS observation_source_concept_id,

    units_cd AS unit_source_value,

 -- [MAPPING COMMENT] no mapping logic defined. Put NULL
    NULL AS qualifier_source_value

--i2b2_observation is i2b2.observation_fact where concept_cd is SNOMED and target is Observation
FROM i2b2_observation LEFT JOIN source_to_concept_map ON i2b2_observation.concept_cd=source_to_concept_map.source_code
WHERE  i2b2_observation.concept_path like '%SNOMED%' AND source_to_concept_map.target_domain_id='Observation'
;